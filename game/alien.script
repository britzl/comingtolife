go.property("color", hash("red"))

local HASH_ACTIVATE = hash("activate")
local HASH_DEACTIVATE = hash("deactivate")
local HASH_CONTACT_POINT_RESPONSE = hash("contact_point_response")

local GRAVITY = vmath.vector3(0, -500, 0)
local ACCELERATION = 500
local MAX_RUNNING_SPEED = 200

local animations = {
	[hash("red")] = { walk = hash("red_walk"), idle = hash("red_idle") },
	[hash("green")] = { walk = hash("green_walk"), idle = hash("green_idle") },
	[hash("blue")] = { walk = hash("blue_walk"), idle = hash("blue_idle") },
}

function init(self)
	msg.post("game:/game", "register_alien", { color = self.color })
	
	self.velocity = vmath.vector3()
	self.direction = -1
	self.ground_contact = false
	self.correction = vmath.vector3()
end

function final(self)
	msg.post("game:/game", "unregister_alien")
end

function update(self, dt)
	
	if not self.ground_contact then
		self.velocity = self.velocity + GRAVITY * dt
	else
		if self.active then
			self.velocity.x = self.velocity.x + (ACCELERATION * self.direction * dt)
			if self.velocity.x > MAX_RUNNING_SPEED then
				self.velocity.x = MAX_RUNNING_SPEED
			elseif self.velocity.x < -MAX_RUNNING_SPEED then
				self.velocity.x = -MAX_RUNNING_SPEED
			end
		else
			self.velocity.x = 0
		end
	end
	

	go.set_position(go.get_position() + self.velocity * dt)

	-- reset volatile state for kinematic collisions
	self.ground_contact = false
	self.correction = vmath.vector3()
end



local function handle_geometry_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	
	if normal.y > 0.7 then
		self.ground_contact = true
	elseif normal.x == 1 and self.direction < 0 then
		self.direction = -self.direction
		print(self.direction, normal)
	elseif normal.x == -1 and self.direction > 0 then
		self.direction = -self.direction
		print(self.direction, normal)
	end
	
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
	if message_id == HASH_ACTIVATE then
		self.active = true
		msg.post("#sprite", "play_animation", { id = animations[self.color].walk })
	elseif message_id == HASH_DEACTIVATE then
		self.active = false
		msg.post("#sprite", "play_animation", { id = animations[self.color].idle })
	elseif message_id == HASH_CONTACT_POINT_RESPONSE then
		if message.group == hash("ground") then
			handle_geometry_contact(self, message.normal, message.distance)
		elseif message.group == hash("red_tile") then
			handle_geometry_contact(self, message.normal, message.distance)
			if self.color == hash("red") then
				msg.post("game:/game", "trigger_blocks")
			end
		elseif message.group == hash("danger") then
			go.delete()
		end
	end
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
